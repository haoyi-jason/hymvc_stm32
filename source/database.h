#ifndef _DATABASE_
#define _DATABASE_

#include <stdint.h>
#include <stdbool.h>

#define MSG_ID_CONTROL	0x12905000
#define MSG_ID_BOOT		0x12905080

#define CANBUS_MESSAGE_COUNT            32

#define DATA_FLASH_CRC_PARAM_OFFSET     0x0
#define DATA_FLASH_CRC_SIZE             64


#define DATA_FLASH_CONFIG_PARAM_OFFSET     DATA_FLASH_CRC_PARAM_OFFSET + DATA_FLASH_CRC_SIZE
#define DATA_FLASH_CONFIG_SIZE             256

#define DATA_FLASH_PID_PARAM_OFFSET     DATA_FLASH_CONFIG_PARAM_OFFSET + DATA_FLASH_CONFIG_SIZE
#define DATA_FLASH_PID_PARAM_SIZE       1024

#define DATA_FLASH_STOW_PARAM_OFFSET     DATA_FLASH_PID_PARAM_OFFSET + DATA_FLASH_PID_PARAM_SIZE
#define DATA_FLASH_STOW_PARAM_SIZE       128

#define DATA_FLASH_CONTROL_PARAM_OFFSET     DATA_FLASH_STOW_PARAM_OFFSET + DATA_FLASH_STOW_PARAM_SIZE
#define DATA_FLASH_CONTROL_PARAM_SIZE       256

#define DATA_FLASH_BASE_PARAM_OFFSET     DATA_FLASH_CONTROL_PARAM_OFFSET + DATA_FLASH_CONTROL_PARAM_SIZE
#define DATA_FLASH_BASE_PARAM_SIZE       256

#define DATA_FLASH_DAC_PARAM_OFFSET     DATA_FLASH_BASE_PARAM_OFFSET + DATA_FLASH_BASE_PARAM_SIZE
#define DATA_FLASH_DAC_PARAM_SIZE       256

#define DATA_FLASH_CANMSG_PARAM_OFFSET     DATA_FLASH_DAC_PARAM_OFFSET + DATA_FLASH_DAC_PARAM_SIZE
#define DATA_FLASH_CANMSG_PARAM_SIZE       256

#define DATA_FLASH_BOARD_PARAM_OFFSET     DATA_FLASH_CANMSG_PARAM_OFFSET + DATA_FLASH_CANMSG_PARAM_SIZE
#define DATA_FLASH_BOARD_PARAM_SIZE       32

#define LIVE_DATA_REPORT_AZ             0x01
#define LIVE_DATA_REPORT_EL             0x02



enum DATA_SECTION_e{
  DATA_SECTION_CONFIG_PARAM,
  DATA_SECTION_PID_PARAM,
  DATA_SECTION_STOW_PARAM,
  DATA_SECTION_CONTROL_PARAM,
  DATA_SECTION_BASE_PARAM,
  DATA_SECTION_DAC_PARAM,
  DATA_SECTION_CANBUS_MSG,
  DATA_SECTION_BOARD_PARAM,
  DATA_SECTION_COMMAND,
};


enum CONFIG_PARAM_e{
  CONFIG_PARAM_PID_AUTO_START,
  CONFIG_PARAM_STOW_CYCLE_TIME_MS,
  CONFIG_PARAM_STOW_TIMEOUT_MS,
  CONFIG_PARAM_AZ_VALID_MASK,
  CONFIG_PARAM_EL_VALID_MASK,
  CONFIG_PARAM_STOW_ACTIVITY_IDLE_TIME_MS,
  CONFIG_PARAM_CAN_RATE_1,
  CONFIG_PARAM_CAN_RATE_2,
  NOF_CONFIG_PARAM
};

enum PID_PARAM_e{
  PID_PARAM_AZ_POS_KP,
  PID_PARAM_AZ_POS_KI,
  PID_PARAM_AZ_POS_KD,
  PID_PARAM_AZ_SPD_KP,
  PID_PARAM_AZ_SPD_KI,
  PID_PARAM_AZ_SPD_KD,
  PID_PARAM_EL_POS_KP,
  PID_PARAM_EL_POS_KI,
  PID_PARAM_EL_POS_KD,
  PID_PARAM_EL_SPD_KP,
  PID_PARAM_EL_SPD_KI,
  PID_PARAM_EL_SPD_KD,
};

enum STOW_PARAM_e{
  STOW_PARAM_POWER_EN_ID,
  STOW_PARAM_DIRECTION_ID,
  STOW_PARAM_AZEL_SELECTION,
};

enum BASE_PARAM_e{
  BASE_PARAM_AZ_POS_INPUT_MIN,
  BASE_PARAM_AZ_POS_INPUT_MAX,
  BASE_PARAM_AZ_POS_INPUT_OFFSET,
  BASE_PARAM_AZ_POS_OUTPUT_MIN,
  BASE_PARAM_AZ_POS_OUTPUT_MAX,
  BASE_PARAM_AZ_POS_OUTPUT_OFFSET,
  BASE_PARAM_AZ_SPD_INPUT_MIN,
  BASE_PARAM_AZ_SPD_INPUT_MAX,
  BASE_PARAM_AZ_SPD_INPUT_OFFSET,
  BASE_PARAM_AZ_SPD_OUTPUT_MIN,
  BASE_PARAM_AZ_SPD_OUTPUT_MAX,
  BASE_PARAM_AZ_SPD_OUTPUT_OFFSET,
  BASE_PARAM_EL_POS_INPUT_MIN,
  BASE_PARAM_EL_POS_INPUT_MAX,
  BASE_PARAM_EL_POS_INPUT_OFFSET,
  BASE_PARAM_EL_POS_OUTPUT_MIN,
  BASE_PARAM_EL_POS_OUTPUT_MAX,
  BASE_PARAM_EL_POS_OUTPUT_OFFSET,
  BASE_PARAM_EL_SPD_INPUT_MIN,
  BASE_PARAM_EL_SPD_INPUT_MAX,
  BASE_PARAM_EL_SPD_INPUT_OFFSET,
  BASE_PARAM_EL_SPD_OUTPUT_MIN,
  BASE_PARAM_EL_SPD_OUTPUT_MAX,
  BASE_PARAM_EL_SPD_OUTPUT_OFFSET,
  
};

enum CONTROL_PARAM_e{
  CONTROL_PARAM_AZ_M1_EN_ID,
  CONTROL_PARAM_AZ_M1_SVON_ID,
  CONTROL_PARAM_AZ_M1_RDY_ID,
  CONTROL_PARAM_AZ_M2_EN_ID,
  CONTROL_PARAM_AZ_M2_SVON_ID,
  CONTROL_PARAM_AZ_M2_RDY_ID,
  CONTROL_PARAM_AZ_LOCK_ID,
  CONTROL_PARAM_AZ_UNLOCK_ID,
  CONTROL_PARAM_AZ_M1_OUTPUT_CHANNEL,
  CONTROL_PARAM_AZ_M2_OUTPUT_CHANNEL,  
  CONTROL_PARAM_AZ_RV_INPUT_CHANNEL,  
  CONTROL_PARAM_EL_M1_EN_ID,
  CONTROL_PARAM_EL_M1_SVON_ID,
  CONTROL_PARAM_EL_M1_RDY_ID,
  CONTROL_PARAM_EL_M2_EN_ID,
  CONTROL_PARAM_EL_M2_SVON_ID,
  CONTROL_PARAM_EL_M2_RDY_ID,
  CONTROL_PARAM_EL_LOCK_ID,
  CONTROL_PARAM_EL_UNLOCK_ID,
  CONTROL_PARAM_EL_M1_OUTPUT_CHANNEL,
  CONTROL_PARAM_EL_M2_OUTPUT_CHANNEL,  
  CONTROL_PARAM_EL_RV_INPUT_CHANNEL,  
};

enum BOARD_PARAM_e{
  BOARD_PARAM_HW_VERSION,
  BOARD_PARAM_SW_VERSION,
  BOARD_PARAM_USER_ID,
  BOARD_PARAM_FUNCTION_CODE,
  BOARD_PARAM_CAN1_BITRATE,
  BOARD_PARAM_CAN2_BITRATE,
  NOF_BOARD_PARAM
};

enum DAC_PARAM_e{
  DAC_PARAM_CORSE_GAIN,
  DAC_PARAM_FINE_GAIN,
  DAC_PARAM_OFFSET
};

enum CANBUS_MSG_PARAM_e{
  CANBUS_MSG_ID,
  CANBUS_MSG_ID_MAX = CANBUS_MSG_ID+CANBUS_MESSAGE_COUNT-1,
  CANBUS_MSG_INTERVAL,
  CANBUS_MSG_INTERVAL_MAX = CANBUS_MSG_INTERVAL+CANBUS_MESSAGE_COUNT-1,
};

//enum MOTOR_PARAM_e{
//  
//};

enum LIVEDATA_SECTIONS_e{
  LIVEDATA_SECTION_COMMAND,
  LIVEDATA_SECTION_ANALOG_IN,
  LIVDDATA_SECTION_ANALOG_OUT,
  LIVEDATA_SECTION_RESOLVER,
  LIVEDATA_SECTION_SYSTEM,
  LIVEDATA_SECTION_DIGITAL_IO,
};

enum LIVEDATA_COMMAND_e{
  //COMMAND
  LIVEDATA_COMMAND_AZ_SP_POS,
  LIVEDATA_COMMAND_AZ_SP_SPD,
  LIVEDATA_COMMAND_EL_SP_POS,
  LIVEDATA_COMMAND_EL_SP_SPD,
  LIVEDATA_COMMAND_AZ_POS_ERR,
  LIVEDATA_COMMAND_AZ_SPD_ERR,
  LIVEDATA_COMMAND_EL_POS_ERR,
  LIVEDATA_COMMAND_EL_SPD_ERR,
};

enum LIVEDATA_RESOLVER_e{
  // Resolver
  LIVEDATA_AZ_RAD,
  LIVEDATA_AZ_DEG,
  LIVEDATA_AZ_RPM,
  LIVEDATA_AZ_RPS,
  LIVEDATA_AZ_DPS,
  LIVEDATA_EL_RAD,
  LIVEDATA_EL_DEG,
  LIVEDATA_EL_RPM,
  LIVEDATA_EL_RPS,
  LIVEDATA_EL_DPS,
};

enum LIVEDATA_ANALOG_IN_e{
  // A/D
  LIVEDATA_VIN_RAW_CH0,
  LIVEDATA_VIN_RAW_CH1,
  LIVEDATA_VIN_RAW_CH2,
  LIVEDATA_VIN_RAW_CH3,
  LIVEDATA_VIN_RAW_CH4,
  LIVEDATA_VIN_RAW_CH5,
  LIVEDATA_VIN_RAW_CH6,
  LIVEDATA_VIN_RAW_CH7,
  LIVEDATA_VIN_VOLT_CH0,
  LIVEDATA_VIN_VOLT_CH1,
  LIVEDATA_VIN_VOLT_CH2,
  LIVEDATA_VIN_VOLT_CH3,
  LIVEDATA_VIN_VOLT_CH4,
  LIVEDATA_VIN_VOLT_CH5,
  LIVEDATA_VIN_VOLT_CH6,
  LIVEDATA_VIN_VOLT_CH7,
};
enum LIVEDATA_ANALOG_OUT_e{
  // D/A
  LIVEDATA_VOUT_RAW_CH0,
  LIVEDATA_VOUT_RAW_CH1,
  LIVEDATA_VOUT_RAW_CH2,
  LIVEDATA_VOUT_RAW_CH3,
  LIVEDATA_VOUT_VOLT_CH0,
  LIVEDATA_VOUT_VOLT_CH1,
  LIVEDATA_VOUT_VOLT_CH2,
  LIVEDATA_VOUT_VOLT_CH3,
};

enum LIVEDATA_SYSTEM_e{
  LIVEDATA_MC_STATUS,
};

enum LIVEDATA_DIGITAL_e{
  LIVEDATA_DIGITAL_INPUT_WORD,
  LIVEDATA_DIGITAL_OUTPUT_WORD,
};

enum CANBUS_MESSAGE_ID_e{
  CANBUS_MSG_ID_AZ_PV,
  CANBUS_MSG_ID_AZ_MC_ERR,
  CANBUS_MSG_ID_EL_PV,
  CANBUS_MSG_ID_EL_MC_ERR,
  CANBUS_MSG_ID_DIO,
  CANBUS_MSG_ID_MC_STA,
  CANBUS_MSG_ID_AZ_PARAM2,
  CANBUS_MSG_ID_AZ_PARAM3,
  
  CANBUS_MSG_ID_EL_POS_PV_SP,
  CANBUS_MSG_ID_EL_POS_ERR,
  CANBUS_MSG_ID_EL_SPD_PV_SP,
  CANBUS_MSG_ID_EL_SPD_ERR,
  CANBUS_MSG_ID_EL_MOTOR_OUT,
  CANBUS_MSG_ID_EL_PARAM1,
  CANBUS_MSG_ID_EL_PARAM2,
  CANBUS_MSG_ID_EL_PARAM3,
  NOF_CANBUS_MSG
};

enum NVM_CMD_e{
  NVM_CMD_SAVE_SECTION,
  NVM_CMD_DEFAULT_SECTION,
  NVM_CMD_REBOOT,
  NVM_CMD_REPORT,
  NVM_CMD_UPDATE_PID,
  NVM_CMD_USER_CONTROL,
  NVM_CMD_AZ_POS_SP,
  NVM_CMD_AZ_SPD_SP,
  NVM_CMD_EL_POS_SP,
  NVM_CMD_EL_SPD_SP,
  NVM_CMD_PID_MODE,
  NVM_CMD_REPORT_CONFIG,
};


void database_init();
int8_t db_read_param(uint8_t section, uint8_t index, uint8_t *value);
int8_t db_write_param(uint8_t section, uint8_t index, uint8_t *value);
int8_t db_read_live_data(uint8_t section, uint8_t index, uint8_t *value);
int8_t db_write_live_data(uint8_t section, uint8_t index, uint8_t *value);
int8_t db_exec_cmd(uint8_t section, uint8_t index, uint8_t *value);
int8_t db_fill_canbus_message(uint8_t section, uint32_t *id, uint8_t *packet);
#endif